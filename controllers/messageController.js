export const handleVideoMessage = async (req, res) => {
  try {
    console.log('üé¨ X·ª≠ l√Ω tin nh·∫Øn video t·ª´ ng∆∞·ªùi d√πng');
    // X√°c th·ª±c quy·ªÅn truy c·∫≠p cu·ªôc tr√≤ chuy·ªán
    const { idConversation, userId } = req.body;
    if (!idConversation || !userId) {
      console.log('‚ùå Thi·∫øu idConversation ho·∫∑c userId');
      return res.status(400).json({ error: "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt" });
    }

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ trong cu·ªôc tr√≤ chuy·ªán kh√¥ng
    const conversation = await ConversationModel.findById(idConversation);
    if (!conversation) {
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán v·ªõi id ${idConversation}`);
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán" });
    }

    const memberExists = conversation.members.some(member => 
      member.idUser && member.idUser.toString() === userId.toString()
    );

    if (!memberExists) {
      console.log(`üö´ Ng∆∞·ªùi d√πng ${userId} kh√¥ng thu·ªôc cu·ªôc tr√≤ chuy·ªán ${idConversation}`);
      return res.status(403).json({ error: "B·∫°n kh√¥ng ph·∫£i l√† th√†nh vi√™n c·ªßa cu·ªôc tr√≤ chuy·ªán n√†y" });
    }

    // X·ª≠ l√Ω video
    if (!req.file) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y file video');
      return res.status(400).json({ error: "Kh√¥ng c√≥ video n√†o ƒë∆∞·ª£c t·∫£i l√™n" });
    }

    // Ki·ªÉm tra dung l∆∞·ª£ng video
    const MAX_VIDEO_SIZE = 100 * 1024 * 1024; // 100MB
    if (req.file.size > MAX_VIDEO_SIZE) {
      console.log(`‚ùå Video qu√° l·ªõn: ${req.file.size} bytes`);
      return res.status(400).json({ error: "Video qu√° l·ªõn, k√≠ch th∆∞·ªõc t·ªëi ƒëa l√† 100MB" });
    }

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng video
    if (!req.file.mimetype.startsWith('video/')) {
      console.log(`‚ùå ƒê·ªãnh d·∫°ng kh√¥ng h·ªó tr·ª£: ${req.file.mimetype}`);
      return res.status(400).json({ error: "ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£" });
    }

    console.log(`‚úÖ Video h·ª£p l·ªá: ${req.file.originalname}, ${req.file.size} bytes, ${req.file.mimetype}`);

    // T·∫°o URL cho video
    const videoUrl = `/uploads/videos/${req.file.filename}`;
    const { sender, content, socketId } = req.body;

    // T·∫°o v√† l∆∞u tin nh·∫Øn video m·ªõi
    const newMessage = new MessageModel({
      idConversation,
      content: content || `Video: ${req.file.originalname}`,
      type: 'video',
      seen: false,
      sender,
      fileUrl: videoUrl,
      fileName: req.file.originalname,
      fileType: req.file.mimetype,
      fileSize: req.file.size
    });

    console.log('üìù L∆∞u tin nh·∫Øn video v·ªõi d·ªØ li·ªáu:', {
      idConversation,
      sender,
      type: 'video',
      fileUrl: videoUrl,
      fileName: req.file.originalname,
      fileSize: req.file.size
    });

    const savedMessage = await newMessage.save();
    console.log(`‚úÖ ƒê√£ l∆∞u tin nh·∫Øn video v·ªõi ID: ${savedMessage._id}`);

    // C·∫≠p nh·∫≠t tin nh·∫Øn cu·ªëi c√πng cho cu·ªôc tr√≤ chuy·ªán
    await updateLastMesssage({
      idConversation,
      message: savedMessage._id
    });
    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tin nh·∫Øn cu·ªëi c√πng cho cu·ªôc tr√≤ chuy·ªán ${idConversation}`);

    // S·ª≠ d·ª•ng Socket.io ƒë·ªÉ th√¥ng b√°o tin nh·∫Øn m·ªõi
    const { emitNewMessage, getIO } = await import('../config/Socket.js');
    
    // S·ª≠ d·ª•ng emitNewMessage ƒë·ªÉ g·ª≠i tin nh·∫Øn m·ªõi
    if (emitNewMessage) {
      const messageEmitted = await emitNewMessage(savedMessage, socketId);
      console.log(`üì£ Tin nh·∫Øn video ƒë√£ ƒë∆∞·ª£c ph√°t s√≥ng: ${messageEmitted ? 'th√†nh c√¥ng' : 'th·∫•t b·∫°i'}`);
    }
    
    // C·∫≠p nh·∫≠t danh s√°ch cu·ªôc tr√≤ chuy·ªán cho t·∫•t c·∫£ th√†nh vi√™n
    try {
      const io = getIO();
      if (io) {
        // L·∫•y th√¥ng tin cu·ªôc tr√≤ chuy·ªán ƒë√£ c·∫≠p nh·∫≠t
        const updatedConversation = await ConversationModel.findById(idConversation)
          .populate({
            path: "members.idUser",
            select: { name: 1, avatar: 1 }
          })
          .populate("lastMessage");
          
        if (updatedConversation && updatedConversation.members) {
          console.log(`üì£ C·∫≠p nh·∫≠t danh s√°ch cu·ªôc tr√≤ chuy·ªán sau khi g·ª≠i video cho ${updatedConversation.members.length} th√†nh vi√™n`);
          
          // Emit update_conversation_list cho t·ª´ng th√†nh vi√™n
          updatedConversation.members.forEach(member => {
            if (member.idUser && member.idUser._id) {
              console.log(`üë§ G·ª≠i c·∫≠p nh·∫≠t danh s√°ch cu·ªôc tr√≤ chuy·ªán cho user: ${member.idUser._id.toString()}`);
              io.to(member.idUser._id.toString()).emit("update_conversation_list", {
                conversation: updatedConversation,
                newMessage: savedMessage
              });
            }
          });
        }
      }
    } catch (socketError) {
      console.error("L·ªói khi g·ª≠i c·∫≠p nh·∫≠t qua socket:", socketError);
      // V·∫´n ti·∫øp t·ª•c x·ª≠ l√Ω ph·∫£n h·ªìi HTTP d√π c√≥ l·ªói socket
    }

    // Tr·∫£ v·ªÅ ph·∫£n h·ªìi th√†nh c√¥ng
    console.log('üì§ G·ª≠i ph·∫£n h·ªìi v·ªÅ client v·ªõi th√¥ng tin tin nh·∫Øn video');
    return res.status(200).json({
      ...savedMessage.toObject(),
      _id: savedMessage._id.toString(),
      fileUrl: videoUrl,
      fileName: req.file.originalname,
      fileType: req.file.mimetype,
      fileSize: req.file.size,
      type: 'video'
    });

  } catch (error) {
    console.error("Error handling video message:", error);
    return res.status(500).json({ error: "L·ªói khi x·ª≠ l√Ω tin nh·∫Øn video" });
  }
}; 